export class FormValidator {
    constructor() {

    }
    _showInputError() { 

    }
    _hideInputError() {

    }
    _isValid() {

    }
    _setEventListeners() {   

    }
    _hasInvalidInput() {

    }
    _toggleButtonState() {

    }
    enableValidation() {

    }
}

// Второй класс, который нужно реализовать -- `FormValidator`:

// - Конструктор принимает два аргумента: конфиг с селекторами и DOM-объект формы, которую нужно отвалидировать. 
// Здесь можно сразу записать в приватные свойства класса необходимые переменные из конфига, 
// чтобы потом в методах сразу к ним обращаться

// - У класса есть один публичный метод включения валидации. Это будет происходить на той форме, 
// которая передаётся вторым параметром в конструкторе. 

// Именно с этой формой и будет работать экземпляр класса (и ни с какой другой!)
// - Весь остальной функционал, который у вас уже есть по валидации, 
// должен стать приватными методами `FormValidator`

// - Конструктор при создании экземпляра класса должен принимать два аргумента - конфигурацию, 
// которые вы ранее передавали в функцию `enableValidation`. 
// А также ссылку на форму, которую необходимо валидировать. 
// Внутри по сути единственным публичным методом будет тот метод, 
// который вы будете запускать, чтобы наложить валидацию на форму

// - Все остальные методы, которые раньше были частью логики валидации, 
// должны стать приватными методами класса