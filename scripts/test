// Вынесем все необходимые элементы формы в константы
// const formElement = document.querySelector('.popup__container');
// const formInput = formElement.querySelector('.popup__input_name');

// console.log(nameInput.id);
const inputElement = formElement.querySelector('.popup__input');
// Функция, которая добавляет класс с ошибкой
const showInputError = (formElement, inputElement, errorMessage) => {
    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);

    inputElement.classList.add('popup__input_type_error');
    errorElement.textContent = errorMessage;
    errorElement.classList.add('form__input-error_active');
  };
  
  // Функция, которая удаляет класс с ошибкой
  const hideInputError = (formElement, inputElement,) => {
    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);

    inputElement.classList.remove('popup__input_type_error');
    errorElement.classList.remove('form__input-error_active');
    errorElement.textContent = '';
  };
  
  // Функция, которая проверяет валидность поля
  const isValid = (formElement, inputElement) => {
    if (!inputElement.validity.valid) {
      // Если поле не проходит валидацию, покажем ошибку
      showInputError(formElement, inputElement, inputElement.validationMessage);
    } else {
      // Если проходит, скроем
      hideInputError(formElement, inputElement);
    }
  };

  const setEventListeners = (formElement) => {
    // Находим все поля внутри формы,
    // сделаем из них массив методом Array.from
    const inputList1 = Array.from(formElement.querySelectorAll('.popup__input'));
    // Обойдём все элементы полученной коллекции
    inputList1.forEach((inputElement) => {
      // каждому полю добавим обработчик события input
      inputElement.addEventListener('input', () => {
        // Внутри колбэка вызовем isValid,
        // передав ей форму и проверяемый элемент
        isValid(formElement, inputElement);
      });
    });

    const inputList2 = Array.from(formElement.querySelectorAll('.popupNewCard__input'));
    // Обойдём все элементы полученной коллекции
    inputList2.forEach((inputElement) => {
      // каждому полю добавим обработчик события input
      inputElement.addEventListener('input', () => {
        // Внутри колбэка вызовем isValid,
        // передав ей форму и проверяемый элемент
        isValid(formElement, inputElement);
    });
  });
  }

  const submitButtonState = (inputElement) => {
    const submitButton = document.querySelectorAll('.button');

    if (!inputElement.validity.valid) {
      submitButton.classList.add('button_invalid');
      submitButton.classList.remove('popup__button-save');
      submitButton.setAttribute('disabled', 'disabled');
    } else {
      submitButton.classList.add('popup__button-save');
      submitButton.classList.remove('button_invalid');
      submitButton.removeAttribute('disabled');
    }
  };

  const enableValidation = () => {
    // Найдём все формы с указанным классом в DOM,
    // сделаем из них массив методом Array.from
    const formList = Array.from(document.querySelectorAll('.form'));
  
    // Переберём полученную коллекцию
    formList.forEach((formElement) => {
      // Для каждой формы вызовем функцию setEventListeners,
      // передав ей элемент формы
      setEventListeners(formElement);
    });
    submitButtonState(inputElement);
  };
  
  // Вызовем функцию
  enableValidation(); 